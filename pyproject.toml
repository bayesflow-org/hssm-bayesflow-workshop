# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

[project]
name = "hssm-bayesflow-workshop"
version = "0.1.0"
description = "Workshop materials for transforming cognitive modeling workflow with BayesFlow and SSMS"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Workshop Contributors"}
]
keywords = ["cognitive-modeling", "bayesflow", "ssms", "tutorial", "workshop"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    # "Programming Language :: Python :: 3.11",
    # "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "bayesflow>=1.0.0",
    "ssm-simulators>=0.10.0",
    "numpy>=2.0",
    "matplotlib",
    "seaborn",
    "pandas",
    # "arviz>=0.12.0",
    # "jax>=0.4.0",
    # "jaxlib>=0.4.0",
    # "pytensor>=2.0.0",
    # "hssm>=0.1.0",
    # "jupyter>=1.0.0",
    # "ipykernel>=6.0.0",
]

[dependency-groups]
dev = [
    "pytest",
    "mypy",
    "black",
    "ruff",
    "pre-commit",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.1",
    "ipykernel>=6.29.5",
    "nbconvert>=7.16.6",
    "nb-clean>=4.0.1",
    "pytest-timer>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/hssm-bayesflow-workshop"
Repository = "https://github.com/your-username/hssm-bayesflow-workshop"
Documentation = "https://github.com/your-username/hssm-bayesflow-workshop#readme"

[tool.ruff]
line-length = 88
exclude = ["notebooks", "docs"]

[tool.ruff.lint]
exclude = ["notebooks", "docs"]
ignore = [
    # space before : (needed for how black formats slicing)
    # "E203",  # not yet implemented
    # module level import not at top of file
    "E402",
    # do not assign a lambda expression, use a def
    "E731",
    # line break before binary operator
    # "W503",  # not yet implemented
    # line break after binary operator
    # "W504",  # not yet implemented
    # controversial
    "B006",
    # controversial
    "B007",
    # controversial
    "B008",
    # setattr is used to side-step mypy
    "B009",
    # getattr is used to side-step mypy
    "B010",
    # tests use assert False
    "B011",
    # tests use comparisons but not their returned value
    "B015",
    # false positives
    "B019",
    # Loop control variable overrides iterable it iterates
    "B020",
    # Function definition does not bind loop variable
    "B023",
    # zip()` without an explicit `strict=
    "B905",
    # Functions defined inside a loop must not use variables redefined in the loop
    # "B301",  # not yet implemented
    # Too many arguments to function call
    "PLR0913",
    # Too many returns
    "PLR0911",
    # Too many branches
    "PLR0912",
    # Too many statements
    "PLR0915",
    # Global statements are discouraged
    "PLW0603",
    # Docstrings should not be included in stubs
    "PYI021",
    # Use typing_extensions.TypeAlias for type aliases
    # "PYI026",  # not yet implemented
    # Use "collections.abc.*" instead of "typing.*" (PEP 585 syntax)
    # "PYI027",  # not yet implemented
    # while int | float can be shortened to float, the former is more explicit
    # "PYI041",  # not yet implemented

    # Additional checks that don't pass yet
    # Within an except clause, raise exceptions with ...
    "B904",
    # Magic number
    "PLR2004",
    # Consider `elif` instead of `else` then `if` to remove indentation level
    "PLR5501",
    # Ignore "Use `float` instead of `int | float`."
    "PYI041",
    # Allow importing from parent modules
    "TID252",
]

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"] 